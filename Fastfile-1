platform :ios do
  ############################## PRE ##############################
  before_all do

    update_fastlane
        ensure_git_status_clean  
        git_pull
    carthage(

      command: "bootstrap",

      platform: "iOS",

      use_binaries: false

    )

    sync_code_signing(git_url: "git@bitbucket.org:doron_katz/my-fastlane-keys.git",

      type: "adhoc",

      app_identifier: "com.doronkatz.firefox")

        test

  end
  
  ############################## POST ##############################
after_all do |lane|
    # This block is called, only if the executed lane was successful
        
        changelog = changelog_from_git_commits(pretty: '%h %s')

commit_version_bump(

      message: 'Build Version Bump by fastlane',

      xcodeproj: "Client.xcodeproj",

      force: true

    )

          slack(message: "Successfuly ran fastlane with lane '#(lane).", success: true, payload: {"lane": lane})
        
        push_to_git_remote

    push_git_tags
        

  end
  ################
  error do |lane, exception|

    slack(message: "fastlane encountered the error ‘#(exception)’ emanating from the lane ‘#(lane)’.", success: false, payload: {“exception”: exception, “lane”: lane})


  end
  
  ################
  
   #------------------------- Test -------------------------#
  desc "Runs all the tests"
  lane :test do
    build
    run-tests
    slack(message: "Successfuly ran all the unit tests", success: true, payload: {})
  end

  #------------------------- Screenshots -------------------------#
  lane :gen_screenshots do
    capture_ios_screenshots
    frame_screenshots(white: true, path: './fastlane/screenshots')
    slack(message: "Successfuly generated new screenshots", success: true, payload: {})
  end

  #------------------------- Build -------------------------#
  lane :build do
    build_ios_app(scheme: "Fennec",
      output_name:"firefox.ipa",
      silent: false,
      export_method: "ad-hoc",
      output_directory: "./Export"
        )
    slack(message: "Successfuly completed a new build", success: true, payload: {})

  end

  ############################## DISTRIBUTION ##############################

  #------------------------- Beta -------------------------#
  lane :beta do
    register_devices(devices_file: "devices.txt")
    build_ios_app(scheme: "Fennec",
        output_name:"firefox.ipa",
        export_method: "ad-hoc",
        silent: false,
        output_directory: "./Export"
      )
    testflight(
      username: "dktz@mac.com",
      app_identifier: "com.doronkatz.firefox",
      beta_app_description: changelog,
      beta_app_feedback_email: "feedback@firefoxapp.com",
      itc_provider: "abcde12345" # pass a specific value to the iTMSTransporter -itc_provider option
      )
      
    increment_build_number(xcodeproj: "Client.xcodeproj")
    commit_version_bump(
      message: 'Build Version Bump by fastlane',
      xcodeproj: "Client.xcodeproj",
      force: true
    )
    changelog = changelog_from_git_commits(pretty: '%h %s')
    add_git_tag(grouping: "testing")
    slack(message: "Distributed new build to TestFlight.", success: true, payload: {"changelog": changelog, "build": get_build_number, "version": get_version_number})
  end

  #------------------------- App Store -------------------------#
  lane :release do
    # by default deliver will call precheck and warn you of any problems
    # if you want precheck to halt submitting to app review, you can pass
    # precheck_default_rule_level: :error
    upload_to_appstore(precheck_default_rule_level: :error)
    gen_screenshots
    create_app_online(
      username: 'dktz@mac.com',
      app_identifier: 'com.doronkatz.firefox',
      app_name: 'Firefox for iOS',
      language: 'English',
      app_version: '1.0',
      team_name: 'Doron Katz' # only necessary when in multiple teams
    )
    deliver(
      submit_for_review: true,
      force: true,
      metadata_path: "./metadata"
    )
  end

  ############################## POST ##############################
  
  after_all do |lane|
    changelog = changelog_from_git_commits(pretty: '%h %s')

    commit_version_bump(
      message: 'Build Version Bump by fastlane',
      xcodeproj: "Client.xcodeproj",
      force: true
    )
    slack(message: "Successfuly ran fastlane with lane '#(lane).", success: true, payload: {"lane": lane})
    push_to_git_remote
  end

  ############################## EXCEPTION HANDLING ##############################
  error do |lane, exception|
    slack(message: "fastlane encountered the error ‘#(exception)’ emanating from the lane ‘#(lane)’.", success: false, payload: {“exception”: exception, “lane”: lane})
  end
end

############################## PRIVATE LANES ##############################
#------------------------- slack -------------------------#
private_lane :slack do |options|
    message = options[:message]
    success = options[:success]
    payload = options[:payload]
    version     = get_version_number(xcodeproj: "Client.xcodeproj")
    build       = get_build_number(xcodeproj: "Client.xcodeproj")
    slack(
      message: message + " :" + version + ":" + build,
      slack_url: "https://hooks.slack.com/services/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",    
      success: success,
      payload: payload)
end
